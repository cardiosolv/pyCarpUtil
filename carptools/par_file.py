#!/usr/bin/env python

class ParameterFile():
    """
    Class for the CARP parameter file
    Bernardo M. Rocha
    """
    
    def __init__(self, im, tend, timedt, dt, spacedt, readmesh, solmethod, cnparab, cgtol, experiment, gridi, nlat, latid, gil):
        self.params = {
                'num_regions'    : 1 ,
                'region[0].name' : "1d_simulation",
                'region[0].im'   : im,
                'tend'           : tend,
                'timedt'         : timedt,
                'dt'             : dt,
                'spacedt'        : spacedt,
                'readmesh'       : readmesh,
                'solnmethod'     : solmethod,
                'CN_parab'       : cnparab,
                'cg_tol_parab'   : cgtol,
                'experiment'     : experiment,
                'gridout_i'      : gridi,
                'num_LATs'       : nlat,
                'lats[0].ID'     : latid,
                'gil'            : gil
                }

        self.num_stim = 0
        self.stimulus = []
    
    def add_stimulus(self, stimtype, start, strength, duration, xd, yd, zd, x0, y0, z0):
        self.num_stim = self.num_stim + 1
        dic_stim = {
            'stimtype' : stimtype,
            'start'    : start,
            'strength' : strength,
            'duration' : duration,
            'xd' : xd,
            'yd' : yd,
            'zd' : zd,
            'x0' : x0,
            'y0' : y0,
            'z0' : z0
        }
        self.stimulus.append(dic_stim)
    
    def write_to_file(self, filename='par_file.par'):
        nregions = self.params['num_regions']; reg0name = self.params['region[0].name']; reg0im = self.params['region[0].im'];
        
        f = open(filename, 'w')
        
        f.write("# ........................................... #\n")
        f.write("# CARP parameter file generated by parFile.py #\n")
        f.write("# ........................................... #\n\n")
        
        f.write("# General settings\n\n")
        for key, val in self.params.items():
            if len(key) < 7:
                aux = 7-len(key); spc = ''
                for i in xrange(aux):
                    spc += ' '
                key = "%s%s" % (key, spc)
            f.write("%s \t = %s\n" % (key, val))
    
        f.write("\n# Stimulus\n\n")
        f.write("num_stim \t\t = %s\n" % self.num_stim)
        stim_cont = 0
        for stim in self.stimulus:
            stim_str = "stimulus[%1d]." % stim_cont
            for key, val in stim.items():
                if len(key) < 7:
                    aux = 7-len(key); spc = ''
                    for i in xrange(aux):
                        spc += ' '
                    key = "%s%s" % (key, spc)
                f.write("%s%s \t = %s\n" % (stim_str, key, val))

        f.close()

if __name__ == "__main__":
       
    mypar = ParameterFile("LRDII_F", 200, 0.5, 10, 1, 3, 4, 1, 1.0e-6, 0, 2, 1, "activation", 0.178077495)    
    mypar.add_stimulus(0, 0, 5e-3, 1, 1100, 1100, 100, -550, -550, -10099)
    mypar.write_to_file('my_par_test.txt')